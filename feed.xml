<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://willis7.github.io/blog</link>
    <atom:link href="https://willis7.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Tue, 18 Aug 2015 19:04:30 +0100</pubDate>
    <lastBuildDate>Tue, 18 Aug 2015 19:04:30 +0100</lastBuildDate>

    <item>
      <title>Staying Safe When Using Public Repositories</title>
      <link>https://willis7.github.io/blog/2015/08/public-repository-security.html</link>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2015/08/public-repository-security.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These days we take dependency management for granted. We simply specify the dependencies we want, and our build tool does the rest. I&amp;#8217;m as guilty as the next person of not investing the authenticity of my dependencies so long as my code works. This naivety is riddled with risks to your business, or worse, anyone who chooses to use your code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_common_scenario&quot;&gt;A Common Scenario&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m developing a super awesome framework that I eventually want everyone to use. I add a few dependencies and my code works perfectly. I publish the binary on Maven Central and my code is downloaded 100million times in the first 10 minutes. Awesome!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This looks harmless on the face of it. I would say most people work in this way, right? As a simple exercise to demonstrate just how risky this is,  I want you to go to Maven Central and search for the most popular Java test framework &lt;em&gt;JUnit&lt;/em&gt;. I just did it and got 399 entries returned. Which one do I chose? am I using the actual JUnit? The second problem is that adding a dependency tells us nothing about how much care those developers were taking from a security perspective. It could be riddled with security holes. Finally, and potentially the most dangerous&amp;#8230; I don&amp;#8217;t know what dependencies JUnit is also pulling in. These transitive dependencies could also be victims of all the above.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_solution&quot;&gt;The Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Dependency_Check&quot;&gt;Dependency Check&lt;/a&gt; is a tool from the OWASP team to check the dependencies you are using for know risks. The core engine contains a series of analyzers that inspect the project dependencies, collect pieces of information about the dependencies (referred to as evidence within the tool). The evidence is then used to identify the Common Platform Enumeration (CPE) for the given dependency. If a CPE is identified, a listing of associated Common Vulnerability and Exposure (CVE) entries are listed in a report.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have this information available you can make a more informed decision about the dependencies you want to carry on using.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_shameless_plug&quot;&gt;A Shameless Plug&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was so impressed with this tool that I decided to work on the &lt;a href=&quot;https://github.com/jeremylong/DependencyCheck&quot;&gt;Dependency Check Gradle Plugin&lt;/a&gt;. You can find this plugin in the Gradle Plugin portal, so feel free to give it a try and provide feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Securing your browsing with Chrome, Tor and Docker</title>
      <link>https://willis7.github.io/blog/2015/06/tor-docker-chrome.html</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2015/06/tor-docker-chrome.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial was prompted by recent blog posts; &lt;a href=&quot;http://martinfowler.com/articles/tor-for-technologists.html&quot;&gt;Tor for technologists&lt;/a&gt; and &lt;a href=&quot;https://blog.jessfraz.com/post/routing-traffic-through-tor-docker-container/&quot;&gt;How to Route Traffic through a Tor Docker container&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The idea here is that we use a docker container to run the Tor client, then using Chrome and Proxy Switch Omega we can switch between secure and non-secure browsing easily.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_to_do_it&quot;&gt;How to do it ..&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step 1: Run &lt;a href=&quot;https://registry.hub.docker.com/u/nagev/tor/&quot;&gt;Nagev&amp;#8217;s&lt;/a&gt; Tor container &lt;code&gt;$ docker run -d --name tor_instance -p 9150:9150 nagev/tor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2: Install &lt;a href=&quot;https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif&quot;&gt;Proxy Switch Omega&lt;/a&gt; in your Chrome browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3: Follow the tutorial for an explanation on how to create your own profile. Click &quot;+ new profile&quot;, set name to &quot;Tor&quot; and check type is set to &quot;Proxy Profile&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://cdn.pbrd.co/images/1r6gA4dE.png&quot;&gt;&lt;img src=&quot;https://cdn.pbrd.co/images/1r6gA4dE.png&quot; alt=&quot;new profile&quot; width=&quot;128&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step 4: In the Tor profile settings screen set protocol to SOCKS5, then insert the IP of your docker container and the port you forwarded. Note* you may need to run &lt;code&gt;$ boot2docker ip&lt;/code&gt; to get the IP if using boot2docker.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://cdn.pbrd.co/images/1r6z4pM1.png&quot;&gt;&lt;img src=&quot;https://cdn.pbrd.co/images/1r6z4pM1.png&quot; alt=&quot;profile config&quot; width=&quot;128&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step 5: Switch the profile to Tor using the button on toolbar. Press the button and click &quot;Tor&quot; from the dropdown.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 6: Check its all working &lt;a href=&quot;https://check.torproject.org/&quot;&gt;https://check.torproject.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://cdn.pbrd.co/images/1r75L8Yu.png&quot;&gt;&lt;img src=&quot;https://cdn.pbrd.co/images/1r75L8Yu.png&quot; alt=&quot;tor success&quot; width=&quot;128&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Mobile development - User-Agent Switcher</title>
      <link>https://willis7.github.io/blog/2015/05/mobile-dev-user-agent-switcher.html</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2015/05/mobile-dev-user-agent-switcher.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_problem&quot;&gt;Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When adding mobile support to your application you want to quickly see what it looks like on multiple devices. While we can use a real mobile device to test things out, this process can be quite cumbersome and time consuming. It&amp;#8217;s best to find a plugin for our browser in order to switch the user agent settings automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_solution&quot;&gt;Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whilst this is by no means the only solution, I have found it to be the easiest. &lt;a href=&quot;https://chrome.google.com/webstore/detail/user-agent-switcher/ffhkkpnppgnfaobgihpdblnhmmbodake?hl=en&quot;&gt;User-Agent Switcher&lt;/a&gt; is an extension for the Chrome browser which lets you easily switch a browser to a mobile device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/akjAvGzlGS_NhaAX-CCibzvpVaYSrFtAdIk7k3qt3LKclUDVis4anLkYKRHvV34gCgnJM7qxvg=s1280-h800-e365-rw&quot; alt=&quot;User-Agent Switcher Context Menu&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Docker Workflow</title>
      <link>https://willis7.github.io/blog/2015/04/docker-workflow.html</link>
      <pubDate>Sun, 26 Apr 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2015/04/docker-workflow.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_lets_talk_workflows&quot;&gt;Lets talk workflows&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you read my series titled &lt;a href=&quot;https://willis7.github.io/blog/2015/03/vagrant-aws-docker-gradle.html&quot;&gt;Vagrant, Amazon EC2, Docker and Microservices&lt;/a&gt;, you may have got to the end and shuddered. If you haven&amp;#8217;t read it, let me explain; I was compiling the microservice on the desktop then using Vagrant to copy the package and the Dockerfile to the cloud instance to perform the docker build. From there I performed a docker run and tested the microservice. Quite clunky and slow - especially the copy accross.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After some thought, and a better understanding of Docker I settled on the following workflow which I uploaded to &lt;a href=&quot;http://www.slideshare.net/SionWilliams1/docker-workflow&quot;&gt;www.slideshare.net&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this slideshow you will see much more thought has gone into the process. We begin in a development environment where a developer can build and run his docker image until he/she is satisfied. Once happy they push to their version control system of choice. At this point the build machine fires into action. It should validate the code and build the image. You may run a series of tests against the container at this point. Once satisfied you would push to your Docker repository (I use Bintray, but you can use DockerHub). The image is then ready to be consumed in other environments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Gradle - always use settings.gradle</title>
      <link>https://willis7.github.io/blog/2015/04/settings-dot-gradle.html</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2015/04/settings-dot-gradle.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_problem&quot;&gt;Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had an issue today where I was working with Jenkins and my release package was given the same name as the Jenkins job. For those of you familiar with Jenkins and the Git plugin, you will know that the workspace is given the same name as the job name, and the source is downloaded into the workspace. What you may not have known is that Gradle infers the name of the project from the root dir name.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_solution&quot;&gt;Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To overcome this issue its a good idea to set up a settings.gradle file to honour your projects name. Create &lt;code&gt;settings.gradle&lt;/code&gt; in the root directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;rootProject.name = &apos;myCoolProjectName&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will also protect you in the open source world with Git where some users may choose to clone into a repository with a different name to what you originally set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may also wish to do this with your sub projects too. I find it makes working in an IDE more pleasant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;rootProject.name = &apos;myCoolProjectName&apos;
findProject(&apos;:a-long-web-dir-name&apos;).name = &apos;web&apos;
findProject(&apos;:a-long-api-dir-name&apos;).name = &apos;api&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>My favourite Jira filters</title>
      <link>https://willis7.github.io/blog/2015/04/jira-filters.html</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2015/04/jira-filters.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_anything_assigned_to_me_personally&quot;&gt;Anything Assigned to Me Personally&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This filter picks up any items that slip through the built in filter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;assignee = currentUser() AND status != Closed ORDER BY Rank ASC&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_assignee_was&quot;&gt;Assignee Was!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gives you a list of tickets you have beed an assignee on since the start of the month.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;assignee was currentUser() after startOfMonth()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_recently_resolved&quot;&gt;Recently Resolved&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;project = &amp;lt;project_name&amp;gt; AND issuetype = Bug AND resolved &amp;gt;= -7d&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Vagrant, Amazon EC2, Docker and Microservices pt4.</title>
      <link>https://willis7.github.io/blog/2015/03/vagrant-aws-docker-gradle-pt4.html</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/03/vagrant-aws-docker-gradle-pt4.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_microservice&quot;&gt;The Microservice&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://2.bp.blogspot.com/-qHSsmfROS1c/UoFWwtez3iI/AAAAAAAAG0M/nxKwNEOaRSs/s1600/logo-spring-io.png&quot; alt=&quot;spring logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this tutorial I&amp;#8217;m going to use a spring boot application that will help us prove the concepts behind this tutorial. There are loads of microservice frameworks to chose from, but for this tutorial we will use Spring Boot. Maybe in the future I will look at trying out some other popular frameworks. Links to the Spring guide are given at the bottom of this tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point we could cheat and do everything in Gradle. Here&amp;#8217;s a &lt;a href=&quot;http://thediscoblog.com/blog/2014/06/13/docker-containers-with-gradle-in-4-steps/&quot;&gt;handy tutorial&lt;/a&gt; showing how to perform your build and docker run using Gradle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_docker&quot;&gt;Docker&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://blog.docker.com/wp-content/uploads/2013/08/KuDr42X_ITXghJhSInDZekNEF0jLt3NeVxtRye3tqco.png&quot; alt=&quot;docker logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I first started writing this article I had plans of going through a 101 for Docker. Since then I have found a fantastic youtube video called &lt;a href=&quot;https://www.youtube.com/watch?v=4W2YY-qBla0&amp;amp;index=21&amp;amp;list=PLDF29927F90450C06&quot;&gt;Docker 101: Dockerizing Your Infrastructure&lt;/a&gt; and I just don&amp;#8217;t think I can add anything to that excellent tutorial. So, rather than going from the foundations I have decided to assume you have watched that video.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we can do the basics with Docker lets start setting our requirements for the container. First, we need java installed so that we can start our microservice. Then, it would be good if we could do some monitoring once the service is started. This is especially important if we plan on running this in a production setting. For that reason we&amp;#8217;re going to move away from ubuntu images, and use an extended version of the &lt;a href=&quot;https://phusion.github.io/baseimage-docker/&quot;&gt;baseimage&lt;/a&gt; image by Phusion. The image is called &lt;a href=&quot;https://registry.hub.docker.com/u/flurdy/oracle-java7/&quot;&gt;flurdy/oracle-java7&lt;/a&gt; and if we look at the Dockerfile for &lt;code&gt;flurdy/oracle-java7&lt;/code&gt; we can see this image is using &lt;code&gt;phusion/baseimage:latest&lt;/code&gt; and bootstrapping it with Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets start building our &lt;code&gt;Dockerfile&lt;/code&gt;. I have created mine in &lt;code&gt;${projectDir}/app/docker&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;FROM flurdy/oracle-java7:latest
MAINTAINER willis7
EXPOSE 8080
ADD build/libs/gs-spring-boot-0.1.0.jar /opt/msvc/gs-spring-boot.jar
CMD java -jar /opt/msvc/gs-spring-boot.jar&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the FROM keyword Docker will first look for the image locally, then look to the public repo if it doesn&amp;#8217;t find it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MAINTAINER simply tells the reader who the author of this Dockerfile is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;EXPOSE tells Docker that a port is to be exposed when the container is started. Now, lets add our build output to the container; we do that using the ADD keyword:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ADD instruction basically takes a &amp;lt;src&amp;gt; and &amp;lt;dest&amp;gt;. If the &amp;lt;dest&amp;gt; path doesn&amp;#8217;t exist, it is created along with the missing directories along its path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we need to tell Docker what command should be run when the container is executed. We do that with the CMD keyword.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And thats it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you look in my github repository you will find 2 helper scripts - one to build the image and the second to run it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker-build.sh
docker-run.sh&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets run through the steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;# Build the source code and run unit tests
$ cd app
$ .gradlew clean build

# Create and provision a VM
$ cd ..
$ vagrant up

# ssh into the box
$ vagrant ssh

# cd to the docker scripts
$ cd /vagrant/docker/

# docker build
$ . docker-build.sh

# docker run
$ . docker-run.sh

# test service running
$ curl localhost:8080
Greetings from Spring Boot!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point we could get Ansible to do all of these steps, but as this is a learning exercise its nice to go through the motions. If you were to add these steps, then we refactored earlier, so these would sit nicely in the Docker Playbook.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial series has been a whistle stop tour through a few different tools and technologies. Whilst the example was extremely simple, hopefully you can see how this could be applied to a Continuous Delivery pipeline for on demand test environments. For the small effort up front in writing your scripts (which in this case were super simple!), you can save costs from not having &quot;always on&quot; environments that aren&amp;#8217;t being used. Also, because we provisioned the environments using a coded format, we can rest assured the environments are the same every time - we also get the luxury of being able to version control our scripts as a result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions or would like me to clarify anything in these tutorials then please feel free to add a comment below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/guides/gs/spring-boot/&quot;&gt;Building an Application with Spring Boot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://plainoldobjects.com/2014/11/16/deploying-spring-boot-based-microservices-with-docker/&quot;&gt;Deploying Spring Boot-based microservices with Docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Vagrant, Amazon EC2, Docker and Microservices pt3.</title>
      <link>https://willis7.github.io/blog/2015/03/vagrant-aws-docker-gradle-pt3.html</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/03/vagrant-aws-docker-gradle-pt3.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_part_3_a_bit_of_back_pedaling&quot;&gt;Part 3 - a bit of back pedaling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After thinking about the &lt;em&gt;hack&lt;/em&gt; I put in to get Puppet installed on the box before I could use it, I felt a little dirty, and decided that maybe Puppet wasn&amp;#8217;t the best decision after-all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, the problem is that I need an agent installed before I can provision my box, but I&amp;#8217;m trying to automate the provisioning - catch 22. Here&amp;#8217;s where Ansible has really stepped up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I suppose we could have continued using the shell provisioner, but Adam Brett raises a good point on this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;&quot;Why not just use Bash scripts, then? Ansible has an edge over Bash scripts because of its simplicity. Ansible just uses a list of tasks to run in YAML2 format. Ansible also comes with idempotency out of the box. That means you can run the same operation numerous times, and the output will remain consistent (i.e. it won&amp;#8217;t do something twice unless you ask it to). You can write Bash scripts this way, but it requires quite a bit more overhead.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ansible&quot;&gt;Ansible&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://p5.zdassets.com/hc/settings_assets/339894/200015136/VmrvDMp3h3CbF4N3W74Ekg-ansible2014_logo_black_tagline.png&quot; alt=&quot;ansible logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is one small caveat with Ansible - we have to install it on the machines that will be running the Vagrant script (Ansible call it the control machine). I&amp;#8217;ve added a link to the docs down in the resources section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Puppet has manifests, Chef has cookbooks and Ansible has playbooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we did with Puppet, lets create an Ansible dev environment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;# create a dir for ansible scripts from project root
$ mkdir playbooks

# change directory
$ cd playbooks/

# create a playbook file for vagrant
$ touch playbook.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The tasks are the same as before, and in the &lt;code&gt;playbook.yml&lt;/code&gt; we express them in the following way:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;---
- hosts: all
  sudo: true
  tasks:
      - name: update apt cache
        apt: update_cache=yes
      - name: install docker.io
        apt: name=docker.io state=present&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we need to tell Vagrant that we want to use the Ansible provisioner. Replace the previous provisioner blocks with the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint ruby language-ruby&quot;&gt;&lt;code&gt;config.vm.provision :ansible do |ansible|
    ansible.playbook = &quot;playbooks/playbook.yml&quot;
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now run &lt;code&gt;vagrant up --provider=aws&lt;/code&gt; and you should see Ansible being used for the provisioning:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;PLAY [all] ********************************************************************

GATHERING FACTS ***************************************************************
ok: [default]

TASK: [update apt cache] ******************************************************
ok: [default]

TASK: [install docker.io] *****************************************************
changed: [default]

PLAY RECAP ********************************************************************
default                    : ok=3    changed=1    unreachable=0    failed=0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, we can ssh into the box and prove Docker is installed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;# ssh into our instance
vagrant ssh

# run docker
sudo docker run -i -t ubuntu /bin/bash&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_refactoring_for_reusability&quot;&gt;Refactoring for reusability&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment our playbook is really simple, so you could argue its not worth refactoring, but as this is a learning exercise I think its worth going through the motions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_separation_of_concerns&quot;&gt;Separation of concerns&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Wikipedia definition goes as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;&quot;In computer science, separation of concerns (SoC) is a design principle for separating a computer program into distinct sections, such that each section addresses a separate concern. A concern is a set of information that affects the code of a computer program.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Docker installation task is a nice place to add some separation. Whilst the task is very simple at the moment, it could get more complex over time. Keeping it separate makes the code easier to read, but also sets us up to be able to reuse in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start by adding a new directory called &lt;code&gt;tasks&lt;/code&gt; and then add a file for docker, &lt;code&gt;docker.yml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;---
- name: install docker.io
  apt: name=docker.io state=present&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Don&amp;#8217;t get caught out by whitespaces. They will fail your build.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, we need to update our playbook to include this new file. Change your &lt;code&gt;playbook.yml&lt;/code&gt; file to match the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;---
- hosts: all
  sudo: true
  tasks:
      - name: update apt cache
        apt: update_cache=yes
      - include: tasks/docker.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Test this new configuration by running &lt;code&gt;vagrant destroy&lt;/code&gt; followed by &lt;code&gt;vagrant up --provider=aws&lt;/code&gt; again. Everything should work exactly as before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.ansible.com/intro_installation.html&quot;&gt;Installing the Control Machine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://adamcod.es/2014/09/23/vagrant-ansible-quickstart-tutorial.html&quot;&gt;Vagrant &amp;amp; Ansible Quickstart Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The GradleBuild task</title>
      <link>https://willis7.github.io/blog/2015/03/GradleBuild-type-task.html</link>
      <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/03/GradleBuild-type-task.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_task_mytask_type_gradlebuild&quot;&gt;task myTask(type: GradleBuild) { }&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have ever imported another build using &lt;code&gt;apply from: &quot;${rootDir}/gradle/publish.gradle&quot;&lt;/code&gt; then you will appreciate how its a little difficult to know exactly what has been applied to your build by said &lt;code&gt;apply&lt;/code&gt; action.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I often use this pattern when I want to clearly seperate the parts of my build. In my build scripts you may see something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;apply from: &quot;${rootDir}/gradle/sonar.gradle&quot;
apply from: &quot;${rootDir}/gradle/acceptance-testing.gradle&quot;
apply from: &quot;${rootDir}/gradle/deploy.gradle&quot;
apply from: &quot;${rootDir}/gradle/publish.gradle&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is very clear and works very well, but sometimes I just don&amp;#8217;t need to be notified of all the tasks a build file imports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In those cases a nicer solution may be to use the GradleBuild task type as shown below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;task publish(type: GradleBuild) {
    buildFile = &quot;${rootDir}/gradle/publish.gradle&quot;
    tasks = [&apos;publishGhPages&apos;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think this is really clear, and if you run &lt;code&gt;gradle tasks&lt;/code&gt; you should find all other tasks from that build file ommitted.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Use Patterns, not Best Practices</title>
      <link>https://willis7.github.io/blog/2015/03/patterns-not-best-practice.html</link>
      <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/03/patterns-not-best-practice.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_worth_a_look&quot;&gt;Worth a look&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was just watching a PuppetLabsInc video on YouTube which had Michael Stankhe presenting &lt;a href=&quot;https://www.youtube.com/watch?v=TdAmAj3eaFI&quot;&gt;&quot;Getting Started with Puppet&quot;&lt;/a&gt;. Its a great presentation and really thought provoking, but the bit I like most is what he said about patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;I use [the term] patterns, I dont use the words best practice because it implies I know all possible options and all your variables. I dont! Patterns are generally good ideas - sometimes they wont work for you, you may be in a situation where one of these patterns fails miserably.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Vagrant, Amazon EC2, Docker and Microservices pt2.</title>
      <link>https://willis7.github.io/blog/2015/03/vagrant-aws-docker-gradle-pt2.html</link>
      <pubDate>Mon, 9 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/03/vagrant-aws-docker-gradle-pt2.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_part_2&quot;&gt;Part 2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the first part of this tutorial, we showed how to use Vagrant to automate and manage an Amazon EC2 instance. We defined a simple Vagrantfile to specify certain attributes for an instance to run, and got it running using Vagrant&amp;#8217;s command line tools. In this part of the tutorial, we&amp;#8217;ll be using Puppet to define and automate the configuration details for our instance. This way, whenever we start up the environment with &lt;code&gt;vagrant up&lt;/code&gt;, it will be set up to run Docker without any additional manual configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_docker_and_puppet&quot;&gt;Docker and Puppet&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation for Docker is very good. Let&amp;#8217;s use that to drive the requirements of our puppet scripts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/installation/ubuntulinux/&quot;&gt;Installing Docker on Ubuntu Trusty 14.04 (LTS) (64-bit)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets start by setting up our puppet dev environment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;# create a dir for puppet scripts from project root
$ mkdir manifests

# change directory
$ cd manifests/

# create a default manifest file for vagrant
$ touch default.pp&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First thing we will want to do on our newly created instance is ensure the &lt;code&gt;apt-get&lt;/code&gt; package database is up to date. This can be achieved with the following block:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint ruby language-ruby&quot;&gt;&lt;code&gt;exec { &quot;apt-get update&quot;:
  path =&amp;gt; &quot;/usr/bin&quot;,
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once thats complete we will want to install the docker package:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint ruby language-ruby&quot;&gt;&lt;code&gt;package { &quot;docker.io&quot;:
  ensure  =&amp;gt; present,
  require =&amp;gt; Exec[&quot;apt-get update&quot;],
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
here we have built a dependency in Puppet. We are saying we don&amp;#8217;t want to continue with this task until the execution of apt-get update is complete.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point we have a bit of a chicken and egg situation. We want to run Puppet on our box to provision it, but Puppet isn&amp;#8217;t currently installed. We can use the shell provisioner to solve that initial problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint ruby language-ruby&quot;&gt;&lt;code&gt;config.vm.provision :shell do |shell|
   shell.inline = &quot;sudo apt-get install -y puppet-common&quot;
 end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
the &lt;code&gt;-y&lt;/code&gt; is a nice trick which we use to force a &lt;em&gt;yes&lt;/em&gt; when prompted if we want to continue.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since we have placed our puppet script in the default location all we need to do is add the following line to the Vagrantfile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;config.vm.provision :puppet&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And thats it!! We can test this works by running &lt;code&gt;vagrant ssh&lt;/code&gt; followed by a &lt;code&gt;sudo docker run -i -t ubuntu /bin/bash&lt;/code&gt;. If all is well then you should see something similar to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;Unable to find image &apos;ubuntu&apos; locally
Pulling repository ubuntu
2d24f826cb16: Download complete
511136ea3c5a: Download complete
fa4fd76b09ce: Download complete
1c8294cc5160: Download complete
117ee323aaa9: Download complete&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.linux.com/learn/tutorials/696255-jumpstart-your-linux-development-environment-with-puppet-and-vagrant&quot;&gt;How to Jumpstart Linux Development with Puppet and Vagrant, Part Two&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Vagrant, Amazon EC2, Docker and Microservices pt1.</title>
      <link>https://willis7.github.io/blog/2015/03/vagrant-aws-docker-gradle.html</link>
      <pubDate>Mon, 9 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/03/vagrant-aws-docker-gradle.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Microservices are all the rage at the moment, but from my experience they just move the bottleneck. Yes, the speed of development increases massively, but it does so at the cost of an increased dependency on the Build and Ops guys.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog series is about using Docker to run a complete and fully functional microservice in the cloud using Vagrant, Amazon AWS and Docker. The goals are as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provisioning of the EC2 instance should be automated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The microservices should run in their own containers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The setup and configuration of the containers should be fully automated, no manual steps required&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Capture everything in a GitHub project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The idea here is if we can automate the whole process, then we will quickly see the real benefits of using a microservice based architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets introduce the tools&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vagrant&quot;&gt;Vagrant&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.erikaheidi.com/theme/fatcatz/images/vagrant/logo_vagrant.png&quot; alt=&quot;vagrant logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vagrant is a nice way to manage our EC2 instances. We can use Vagrant to create and instance and provision the box to a state we desire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once Vagrant is installed on your dev machine, to use the &lt;code&gt;AWS&lt;/code&gt; provider type in Vagrant we will need to install the Vagrant AWS plugin. That can be done with the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;vagrant plugin install vagrant-aws&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This took a while on my machine without a great deal of feedback. Just be patient, it will finish eventually.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, now lets create our project and the Vagrantfile. Run the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;# create a project folder
$ mkdir infra-n-app-automation

# change directory
$ cd infra-n-app-automation

# create the vagrant file
$ vagrant init&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a message something similar to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we follow the Vagrant AWS plugin docs, we can see the basic Vagrantfile should look as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint ruby language-ruby&quot;&gt;&lt;code&gt;Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.box = &quot;dummy&quot;

  config.vm.provider :aws do |aws, override|
    aws.access_key_id = &quot;YOUR KEY&quot;
    aws.secret_access_key = &quot;YOUR SECRET KEY&quot;
    aws.session_token = &quot;SESSION TOKEN&quot;
    aws.keypair_name = &quot;KEYPAIR NAME&quot;

    aws.ami = &quot;ami-7747d01e&quot;

    override.ssh.username = &quot;ubuntu&quot;
    override.ssh.private_key_path = &quot;PATH TO YOUR PRIVATE KEY&quot;
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The guide suggests putting your &lt;code&gt;access_key_id&lt;/code&gt; and &lt;code&gt;secret_access_key&lt;/code&gt; in the Vagrantfile, which is fine if you have a private repository, but as I plan on making this public I will set them using environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;export AWS_ACCESS_KEY=&quot;AKXXXXXXXXXXXXXXX&quot;
export AWS_SECRET_KEY=&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After configuring my Security Group, selecting an AMI and sorting my private key, my Vagrantfile now looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint ruby language-ruby&quot;&gt;&lt;code&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
  # Box configuration
  config.vm.box = &quot;dummy&quot;
  config.vm.box_url = &quot;https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box&quot;

  # Share an additional folder to the guest VM.
  # config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;

  # Provider
  config.vm.provider :aws do |aws, override|
    aws.keypair_name = &quot;dev&quot;
    override.ssh.username = &quot;ubuntu&quot;
    override.ssh.private_key_path = &quot;~/.ssh/dev.pem&quot;

    aws.ami = &quot;ami-234ecc54&quot; #Ubuntu 14.04.1 LTS
    aws.region = &quot;eu-west-1&quot;
    aws.instance_type = &quot;t2.micro&quot;
    aws.security_groups = [&quot;WebServerSG&quot;]

    aws.tags = {
      &apos;Name&apos; =&amp;gt; &apos;Vagrant&apos;
    }
  end

  # Provisioning
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can now start the VM using the command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;vagrant up --provider=aws&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and once the instance is available we can connect using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;vagrant ssh&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;finally, when we want to stop the instance we can run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;vagrant halt&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_gotchas&quot;&gt;Gotchas&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had a few challenges when I first started with Vagrant and AWS. They were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security Groups&lt;/strong&gt; - You will noticed I used the &lt;code&gt;WebServerSG&lt;/code&gt; group. I set this up as per the Amazon documentation found &lt;a href=&quot;http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario3.html#SecurityGroups-3&quot;&gt;here&lt;/a&gt;. Until I made this change I was hanging at the &quot;&lt;em&gt;Waiting for SSH to become available&amp;#8230;&lt;/em&gt;&quot; stage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AMI&lt;/strong&gt; - If you want to use the free tier I would recommend going through the Amazon &quot;Launch Instance&quot; wizard and recording the AMI id for your region and price plan. I found some of the online examples simply didn&amp;#8217;t exist and were region specific.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This concludes part one of the tutorial. We can now create and control the lifecycle of an EC2 instance, and in part two we will install Docker and any other dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source can be found in the repository below:
&lt;a href=&quot;https://github.com/willis7/infra-n-app-automation&quot;&gt;https://github.com/willis7/infra-n-app-automation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_update_strong_edited_10_03_2015_strong&quot;&gt;Update! &lt;strong&gt;Edited: 10-03-2015&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be very careful with your Amazon details on the web. I have provided a solution above for removing them from your source code. For a more in depth example see, &lt;a href=&quot;http://www.devopsdiary.com/blog/2013/05/07/automated-deployment-of-aws-ec2-instances-with-vagrant-and-puppet/&quot;&gt;here&lt;/a&gt;.Dont end up like this poor fella: &lt;a href=&quot;https://securosis.com/S=0/blog/my-500-cloud-security-screwup&quot;&gt;My $500 Cloud Security Screwup&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Weekly Links Roundup</title>
      <link>https://willis7.github.io/blog/2015/03/weekly-links-2015-03-08.html</link>
      <pubDate>Sun, 8 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/03/weekly-links-2015-03-08.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vagrant&quot;&gt;Vagrant&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.iheavy.com/2014/01/16/how-to-deploy-on-amazon-ec2-with-vagrant/&quot;&gt;How to deploy on Amazon EC2 with Vagrant&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.devopsdiary.com/blog/2013/05/07/automated-deployment-of-aws-ec2-instances-with-vagrant-and-puppet/&quot;&gt;Automated Deployment of AWS EC2 Instances With Vagrant and Puppet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_docker&quot;&gt;Docker&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://phusion.github.io/baseimage-docker/&quot;&gt;baseimage-docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_noteworthy&quot;&gt;Noteworthy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.devopsbookmarks.com/&quot;&gt;devops bookmarks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Dependency Management - Modeling Suppliers and Consumers pt.1</title>
      <link>https://willis7.github.io/blog/2015/03/graphing-build-dependencies.html</link>
      <pubDate>Sat, 7 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/03/graphing-build-dependencies.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependency management has come a long way over the past 10 years, but I believe it has some way to go before we can say the problem is solved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider the scenario where you have developed a library which inadvertently introduced a severe security vulnerability. Because your organisation believes in reuse it has been used in many different projects. The Maven POM (Project Object Model) does a good job in providing us with meta-data about the modules which are &lt;em&gt;suppliers&lt;/em&gt; to a project, but it doesn&amp;#8217;t capture information about who the &lt;em&gt;consumers&lt;/em&gt; are.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, we have a dangerous library in the wild, but we cant say with any certainty who is consuming it. At this point the only solution is to trawl through every projects POM and look to see if you have declared this library as a dependency. This is going to make your day very unpleasant if you have more than a hand full of projects, and if you&amp;#8217;ve moved in the direction of microservices then this is going to be hell!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_potential_solution&quot;&gt;A potential solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I mentioned earlier a Maven POM provides us with a way of describing what dependencies a project has. These are identified using a standard set of attributes; &lt;em&gt;groupId&lt;/em&gt;, &lt;em&gt;artifactId&lt;/em&gt; and &lt;em&gt;version&lt;/em&gt;. There are other attributes, but we will ignore them for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;groupId&lt;/em&gt; - a macro group or family of projects or archives to which a project belongs. For example, &lt;code&gt;org.hibernate&lt;/code&gt; and &lt;code&gt;org.richfaces.ui&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;artifactId&lt;/em&gt; - the unique identifier of the project among the projects sharing the same &lt;code&gt;groupId&lt;/code&gt;. For example, &lt;code&gt;junit&lt;/code&gt;, &lt;code&gt;hibernate-annotations&lt;/code&gt;, and &lt;code&gt;richfaces-components-ui&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;version&lt;/em&gt; - a version number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets turn our dependency tree into a graphical representation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://site.kuali.org/maven/plugins/graph-maven-plugin/1.2.3/graph/direct/compile/flat.png&quot; alt=&quot;flat&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wouldn&amp;#8217;t it be good if we could store all of these project graphs in a single location where they could establish relationships with other projects?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re already talking about graphs, so wouldn&amp;#8217;t a graph database be a good place to start?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_describing_the_domain&quot;&gt;Describing the domain&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The underlying data model of a graph database is whats called the Property Graph data model. Essentially, it means that we will be storing our data in a graph database, and that we will be using vertices and edges(or nodes and relationships) to persist our data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This works really well for the problem we&amp;#8217;re trying to solve because we&amp;#8217;re talking about artifacts (nodes), and their relationships with each other artifacts. Lets look at some code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;@NodeEntity
public class Artifact {

    @GraphId Long id
    String groupId
    String artifactId
    String version

    @RelatedTo(type = &quot;DEPENDS_ON&quot;, direction = Direction.OUTGOING)
    public @Fetch Set&amp;lt;Artifact&amp;gt; dependencies


    public void dependsOn(Artifact artifact) {
        if ( !dependencies ) {
            dependencies == new HashSet&amp;lt;Artifact&amp;gt;()
        }
        dependencies.add(artifact)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I&amp;#8217;m using Spring heavily here - this may look unfamiliar if you don&amp;#8217;t know Spring.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here you can see I&amp;#8217;ve constructed the node using the attributes I defined earlier. There is an id which is annotated with &lt;code&gt;@GraphId&lt;/code&gt; that Neo4j uses to track the data, a groupId, artifactId and version. Inside this node entity I have also defined a &lt;code&gt;Set&amp;lt;Artifact&amp;gt;&lt;/code&gt; of dependencies marked up as &lt;code&gt;@RelatedTo&lt;/code&gt;. This means that every member of this set is expected to also exist as a separate &lt;code&gt;Artifact&lt;/code&gt; node, and this node &lt;code&gt;DEPENDS_ON&lt;/code&gt; them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, this concludes part 1. Pt2 coming soon..&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Setup MongoDB on Mac Yosemite</title>
      <link>https://willis7.github.io/blog/2015/02/mac-mongodb.html</link>
      <pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/02/mac-mongodb.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_install_mongodb_with_homebrew&quot;&gt;Install MongoDB with Homebrew&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;$ brew install mongodb
$ mkdir -p /data/db&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_set_permissions_for_the_data_directory&quot;&gt;Set permissions for the data directory&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensure that user account running mongod has correct permissions for the directory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;$ sudo chmod 0755 /data/db
$ sudo chown $USER /data/db&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_run_mongodb&quot;&gt;Run MongoDB!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;$ mongod&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you get something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;exception in initAndListen: 10309 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It means that &lt;code&gt;/data/db&lt;/code&gt; lacks required permission and ownership.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run &lt;code&gt;ls -ld /data/db/&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Output should look like this (&lt;code&gt;willis7&lt;/code&gt; is directory owner and &lt;code&gt;staff&lt;/code&gt; is group to which willis7 belongs):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;drwxr-xr-x  7 willis7  staff  238 Aug  5 11:07 /data/db/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Reading a POM from Gradle</title>
      <link>https://willis7.github.io/blog/2015/02/read-pom-from-xml.html</link>
      <pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/02/read-pom-from-xml.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reading a Maven POM is Easy with Gradle and Groovy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The inspiration for this post came from the post here:
&lt;a href=&quot;https://stackoverflow.com/questions/11558157/reading-info-from-existing-pom-xml-file-using-gradle&quot;&gt;Reading info from existing pom.xml file using Gradle?&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Naively I implemented the first solution which is given below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;defaultTasks &apos;hello&apos;

repositories {
  mavenCentral()
}
configurations {
  mavenAntTasks
}
dependencies {
  mavenAntTasks &apos;org.apache.maven:maven-ant-tasks:2.1.3&apos;
}

task hello &amp;lt;&amp;lt; {
  ant.taskdef(
    resource: &apos;org/apache/maven/artifact/ant/antlib.xml&apos;,
    uri: &apos;antlib:org.apache.maven.artifact.ant&apos;,
    classpath: configurations.mavenAntTasks.asPath)

  ant.&apos;antlib:org.apache.maven.artifact.ant:pom&apos;(id:&apos;mypom&apos;, file:&apos;pom.xml&apos;)
  println ant.references[&apos;mypom&apos;].version
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, this solution did meet the original posters requirement. However, after running the hello task I was surprised to see
a few libs being downloaded which didn&amp;#8217;t feel slick.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In true groovy fashion this could be achieved much more simply using the code below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def pom = new XmlSlurper().parse(new File(&apos;pom.xml&apos;))

println &apos;my pom version &apos; + pom.version&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Debugging Gradle Plugins in Intellij</title>
      <link>https://willis7.github.io/blog/2015/01/debugging-gradle-intellij.html</link>
      <pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/01/debugging-gradle-intellij.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, so this one had me stumped for a while and the solution was extremely simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I read lots of information in the Gradle forums on this and it sent me in the wrong
direction. Loads of articles saying to set certain flags/GRADLE_OPTS, which isnt necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, in Intellij (im using version 14), set your breakpoint and from the Gradle Tool Window
in &lt;em&gt;all tasks&lt;/em&gt; area, right click the task and select the debug option from the context
menu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voila!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/help/working-with-gradle-tasks-in-gradle-tool-window.html&quot;&gt;Intellij docs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>New Year, New Tech</title>
      <link>https://willis7.github.io/blog/2014/new-year-new-tech.html</link>
      <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2014/new-year-new-tech.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, its the last day of 2014 and I&amp;#8217;ve been thinking about some of the things I&amp;#8217;ve achieved, and gave some thought
to what I would like to achieve in 2015. It&amp;#8217;s a well known fact that information  changes, so to stay current any self respecting IT
professional should be constantly aspiring to learn new things, or better understand what they know already.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s my shortlist of subjects I would like to enhance my knowledge of in the new year:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;White hat hacking &amp;amp; Penetration testing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sysadmin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Meta programming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work through a few &lt;a href=&quot;http://www.google.com/edu/tools-and-solutions/guide-for-technical-development/index.html&quot;&gt;Google recommended subjects&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets discuss them in turn:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Hacking&lt;/div&gt;
&lt;p&gt;We all know how to test our code with unit, integration and exploratory testing. However, most people rarely pay much attention to
the security elements. Ok, so most people can run static analysis with tools such as OWASP, but that still leaves the dynamic
elements vulnerable. My aim is to understand some of the common ways of hacking software, and then use that knowledge to
better inform some design and implementation patterns in my code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Sysadmin&lt;/div&gt;
&lt;p&gt;I can navigate my way through a *nix system fairly easily, but I wouldn&amp;#8217;t say im a pro. In fact, if someone took Google away
I would be fairly stuck. My goal is to learn 15 of the most common commands and practice using them on a regular basis. This is
very much how I learnt to use Git proficiently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Meta programming&lt;/div&gt;
&lt;p&gt;An interesting concept that I&amp;#8217;ve hear used a lot, but not ever taken a deep dive into. I&amp;#8217;m aware of its benefits in creating
DSL&amp;#8217;s, so I would like to spend some time working with this cool feature. As I&amp;#8217;m still having a lot of fun with Groovy
I suspect that will be the language I use to explore &lt;a href=&quot;http://groovy.codehaus.org/Compile-time+Metaprogramming+-+AST+Transformations&quot;&gt;Meta Programming&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Work through a few Google recommendations&lt;/div&gt;
&lt;p&gt;I&amp;#8217;m particularly interesting in the discreet mathematics. As a student I didn&amp;#8217;t really enjoy maths, but as ive grown older (and wiser)
I&amp;#8217;ve gained an appreciation for maths. I guess I&amp;#8217;ve come to accept that without maths, we probably wouldn&amp;#8217;t have IT as we know it
today. Its only fair that I give it the respect it deserves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, thats my list of things I will be playing around with in 2015. I will try to blog what I&amp;#8217;ve learnt and how I&amp;#8217;ve understood the
subject, and hopefully share my experience with other like-minded people.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Blogging with JBake and GitHub Pages</title>
      <link>https://willis7.github.io/blog/2014/jbake-blog.html</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2014/jbake-blog.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;welcome_to_the_new_blog&quot;&gt;Welcome to the new blog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all a great thanks to &lt;a href=&quot;http://robertmcintosh.me/&quot;&gt;Mac&lt;/a&gt; for steering me in the direction of JBake. His blog inspired
me to spend the time and implement my own version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m not going to spend a long time on this because there is a plethora of information online - rather I will add tips here
and links to the resources I used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how_to_do_it&quot;&gt;How to do it&amp;#8230;.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a list of tools you will need to follow along:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://gvmtool.net/&quot;&gt;GVM the Groovy enVironment Manager&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gradle.org/&quot;&gt;Gradle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://jbake.org/&quot;&gt;JBake&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use GVM to install Gradle and JBake latest. This will save you a lot of manual installation. Sorry Windows people,
but you will have to install manually unless you use &lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt; and GVM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the instructions on the Git website to install Git.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;set_up_a_github_pages_project&quot;&gt;Set up a GitHub Pages Project&lt;/h3&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Resource&lt;/div&gt;
&lt;a href=&quot;https://help.github.com/articles/creating-project-pages-manually/&quot;&gt;Github - Creating Project Pages manually&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create a new repository on GitHub - I called mine &lt;em&gt;blog&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a fresh clone&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;gh-pages&lt;/code&gt; branch - this &lt;strong&gt;must&lt;/strong&gt; be an orphaned branch. Follow the steps in the link above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the_rest&quot;&gt;The rest &amp;#8230;.&lt;/h3&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Resource&lt;/div&gt;
&lt;a href=&quot;https://melix.github.io/blog/2014/02/hosting-jbake-github.html&quot;&gt;Authoring your blog on GitHub with JBake and Gradle&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
As of writing this blog the &lt;code&gt;publish&lt;/code&gt; task is now renamed to &lt;code&gt;publishGhPages&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To finish off this project I followed Cédric&amp;#8217;s tutorial shown in the link above. However, rather than have 2 separate build
files I opted for a single build script. I didn&amp;#8217;t notice any of the classpath issues that Cédric has raised in his post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My build file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;buildscript {
  repositories {
      jcenter()
  }

  dependencies {
    classpath &apos;me.champeau.gradle:jbake-gradle-plugin:0.2&apos;

    // optional, if you use asciidoctor markup
    classpath &apos;org.asciidoctor:asciidoctor-java-integration:0.1.4&apos;

    // optional, if you use freemarker template engine
    classpath &apos;org.freemarker:freemarker:2.3.19&apos;

    classpath &apos;org.ajoberstar:gradle-git:0.12.0&apos;
  }
}

apply plugin: &apos;me.champeau.jbake&apos;
apply plugin: &apos;org.ajoberstar.github-pages&apos;

githubPages {
  repoUri = &apos;git@github.com:willis7/blog.git&apos;
  pages {
    from(file(&apos;build/jbake&apos;)) {
      into &apos;.&apos;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I&amp;#8217;m using the SSH communication protocol with GitHub. I did try simple authentication, but had problems and switched to SSH.
Theres a great &lt;a href=&quot;https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git&quot;&gt;tutorial by Atlassian&lt;/a&gt; that guides you through the steps.
Whilst it is for Bitbucket, the steps are relevant to GitHub.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the amount of blogging that I do, I guess it begs the question why I would switch from blogger. Well, the truth is it was
more about the challenge and the learning. When I originally opened my blog it was intended
to be a personal reminder of problems I encountered and the solutions I found. If someone got benefit from them, then that&amp;#8217;s
even better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far I have enjoyed the flexibility brought through the use of JBake. I can play with many template engines, explore CSS and JS
all within the confines of my own blog. Also, as I&amp;#8217;m using Git if I stuff something up I can always revert back to a working version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A pleasurable experience in all. Easy to get started too!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Debugging Grails tests with Intellij</title>
      <link>https://willis7.github.io/blog/2014/debugging-grails-intellij.html</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2014/debugging-grails-intellij.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was having some real headaches with debugging my unit tests today. With the introduction of forked execution came the breakage of Intellij debugging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some rather long winded ways of applying remote debuggers, and Ted does a great job of breaking the problem
down and &lt;a href=&quot;http://naleid.com/blog/2014/11/10/debugging-grails-forked-mode&quot;&gt;offering a solution&lt;/a&gt;. However, in my rather tiny
Grails application I was happy to sacrifice the &lt;a href=&quot;http://grails.io/post/43484836985/road-to-grails-2-3-forked-execution&quot;&gt;benefits of forked execution&lt;/a&gt; - at least for my tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, in BuildConfig.groovy I changed the following block:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;grails.project.fork = [
    test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon:true],
    run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],
    war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],
    console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;grails.project.fork = [
    test: false,
    run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],
    war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],
    console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This change tells Grails that when we run the test configuration it shouldn&amp;#8217;t run in forked mode - this is anything we would run using the &lt;em&gt;test-app&lt;/em&gt; Grails command.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Method on class [] was used outside of a Grails application.</title>
      <link>https://willis7.github.io/blog/2014/method-on-class-grails.html</link>
      <pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2014/method-on-class-grails.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Method on class [] was used outside of a Grails application. If running in the context of a test using the mocking API or bootstrap Grails correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;java.lang.IllegalStateException: Method on class [com.willis.heimdall.Booking] was used outside of a Grails application. If running in the context of a test using the mocking API or bootstrap Grails correctly.
      at com.willis.heimdall.BookingIntegSpec.test saving a booking to the db(BookingIntegSpec.groovy:24)&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I recently had this error on one of my simple examples. A real facepalm moment when I look back in retrospect but ho hum, the fix is nice and easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Broken Code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;package com.willis.heimdall

import org.joda.time.DateTime
import spock.lang.Shared
import spock.lang.Specification

/**
 * Integration tests for the Booking model
 * @author Sion Williams
 */
class BookingIntegSpec extends Specification {
    @Shared def today = new DateTime()
    @Shared def todayPlusWeek = today.plusWeeks(1)

    def &apos;test saving a booking to the db&apos;() {
        given: &apos;a new booking booking&apos;
        def booking = new Booking(name: &apos;my booking&apos;,
                startTime: today.toDate(),
                endTime: todayPlusWeek.toDate())

        when: &apos;the booking is saved&apos;
        booking.save()

        then: &apos;it can be successfully found in the database&apos;
        booking.errors.errorCount == 0
        booking.id != null
        Booking.get(booking.id).name == &apos;my booking&apos;
        Booking.get(booking.id).startTime == today.toDate()
        Booking.get(booking.id).endTime == todayPlusWeek.toDate()

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixed Code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;package com.willis.heimdall

import grails.test.mixin.TestFor
import org.joda.time.DateTime
import spock.lang.Shared
import spock.lang.Specification

/**
 * Integration tests for the Booking model
 * @author Sion Williams
 */
@TestFor(Booking)
class BookingIntegSpec extends Specification {
    @Shared def today = new DateTime()
    @Shared def todayPlusWeek = today.plusWeeks(1)

    def &apos;test saving a booking to the db&apos;() {
        given: &apos;a new booking booking&apos;
        def booking = new Booking(name: &apos;my booking&apos;,
                startTime: today.toDate(),
                endTime: todayPlusWeek.toDate())

        when: &apos;the booking is saved&apos;
        booking.save()

        then: &apos;it can be successfully found in the database&apos;
        booking.errors.errorCount == 0
        booking.id != null
        Booking.get(booking.id).name == &apos;my booking&apos;
        Booking.get(booking.id).startTime == today.toDate()
        Booking.get(booking.id).endTime == todayPlusWeek.toDate()

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note here that we have told Grails what we are testing with the @TestFor() annotation so that it can set up the relevant mocks and stubs in the background.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Gradle Logging - Writing the build output to a file</title>
      <link>https://willis7.github.io/blog/2013/gradle-output-to-log.html</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2013/gradle-output-to-log.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This simple snippet adds 2 additional output listeners;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams&quot;&gt;Standard Out and Standard Error&lt;/a&gt;
and pipes their output to a build log.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def tstamp = new Date().format(&apos;yyyy-MM-dd_HH-mm-ss&apos;)
def buildLogDir = &quot;${rootDir}/build/logs&quot;
mkdir(&quot;${buildLogDir}&quot;)
def buildLog = new File(&quot;${buildLogDir}/${tstamp}_buildLog.log&quot;)

import org.gradle.logging.internal.*
System.setProperty(&apos;org.gradle.color.error&apos;, &apos;RED&apos;)

gradle.services.get(LoggingOutputInternal).addStandardOutputListener (new StandardOutputListener () {
    void onOutput(CharSequence output) {
        buildLog &amp;lt;&amp;lt; output
    }
})

gradle.services.get(LoggingOutputInternal).addStandardErrorListener (new StandardOutputListener () {
    void onOutput(CharSequence output) {
        buildLog &amp;lt;&amp;lt; output
    }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Weblogic/WLST - Packing and Unpacking a domain</title>
      <link>https://willis7.github.io/blog/2012/wlst-pack-unpack-domain.html</link>
      <pubDate>Sat, 19 May 2012 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2012/wlst-pack-unpack-domain.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you start working with distributed domains there will come a time when you need to pack the domain and unpack it in its distributed areas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether you create your domain via the GUI or by scripting, all you&amp;#8217;re actually doing is creating a series of configuration files. At this point you&amp;#8217;re not actually starting any servers - that comes later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets consider the following architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;AdminServer = Machine A
Managed01   = Machine B
Managed02   = Machine C
Cluster01   = Managed01, Managed02&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, you run through the wizard and configured the domain above. You should now notice your domain has been created on Machine A, but if you log into Machine B or C nothing exists. This is where the need to Pack and UnPack comes in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To pack the domain run the following WLST script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint python language-python&quot;&gt;&lt;code&gt;# Create a template .jar of an existing domain
# Open an existing domain

readDomain(domainDirName)

# Write the domain configuration information to a domain template
writeTemplate(templateName)

closeDomain(templateName)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This script opens the domain and extracts (as a jar) the configurations required
for the servers that will reside on Machines B and C. It&amp;#8217;s a skeleton configuration
because the Admin server information will be excluded - a domain only ever has 1
Admin server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have a templateName.jar we can send it to the machines that the rest
of the domain will reside on and run the unpack script on each machine:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint python language-python&quot;&gt;&lt;code&gt;# unpack.py: convert from unpack command to wlst script
# This script shows how to convert from the unpack command to a wlst script.
# Note that the domain and template values, and the options to setOption, must be single-quoted
# Specify the template that you want to use

readTemplate(&apos;c:\wls9\user_templates\wlst_wls_template.jar&apos;)

# If you specified the -username and -password option in the unpack command,
# Specify them here. Otherwise, delete these lines`
# Note that the domain_name field here is just the name of the domain, not the full path as specified in writeDomain below

cd (&apos;/Security/&amp;lt;domain-name&amp;gt;&apos;)
create (&amp;lt;user_name&amp;gt;,&apos;User&apos;)
cd (&apos;User/&amp;lt;user_name&amp;gt;&apos;)
set (&apos;Password&apos;,&amp;lt;password&amp;gt;)

# analogous to unpack -java_home
setOption(&apos;JavaHome&apos;,&amp;lt;java_home&amp;gt;)

# analogous to unpack -server_start_mode
setOption(&apos;ServerStartMode&apos;,&amp;lt;server_start_mode&amp;gt;)

# analogous to unpack -app_dir
setOption(&apos;AppDir&apos;,&amp;lt;app_dir&amp;gt;)

# write the domain
writeDomain(&amp;lt;domain&amp;gt;)

closeTemplate()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
